#!/bin/sh /etc/rc.common
START=45
STOP=99
EXTRA_COMMANDS="firewall restart"
APP='nfs'

check_nfsd() {
	pidof nfsd &>/dev/null && return 0
	return 1
}

get_lan_ip() {
	LAN_IP=$(uci get network.lan.ipaddr)
	[ -z "$LAN_IP" ] && return 1
	LAN_IP="${LAN_IP%.*}.0/24"
	WAN_IF=$(uci get network.wan.ifname)
	[ -z "$WAN_IF" ] && return 1
	return 0
}

iptables_flush() {
	get_lan_ip || return 1
	iptables-restore <<-EOF || {
		$(echo -e "$( iptables-save -t filter )" | grep -v 'NFS')
	EOF
		iptables -t filter -D INPUT -s $LAN_IP -i $WAN_IF -p tcp -m tcp --dport 111 -m comment --comment "NFS" -j ACCEPT
		iptables -t filter -D INPUT -s $LAN_IP -i $WAN_IF -p udp -m udp --dport 111 -m comment --comment "NFS" -j ACCEPT
		iptables -t filter -D INPUT -s $LAN_IP -i $WAN_IF -p tcp -m tcp --dport 32777:32780 -m comment --comment "NFS" -j ACCEPT
		iptables -t filter -D INPUT -s $LAN_IP -i $WAN_IF -p udp -m udp --dport 32777:32780 -m comment --comment "NFS" -j ACCEPT
	}
	return $?
}

iptables_restore() {
	get_lan_ip || return 1
	iptables-restore -n <<-EOF || {
		*filter
		-A INPUT -s $LAN_IP -i $WAN_IF -p tcp -m tcp --dport 111 -m comment --comment "NFS" -j ACCEPT
		-A INPUT -s $LAN_IP -i $WAN_IF -p udp -m udp --dport 111 -m comment --comment "NFS" -j ACCEPT
		-A INPUT -s $LAN_IP -i $WAN_IF -p tcp -m tcp --dport 32777:32780 -m comment --comment "NFS" -j ACCEPT
		-A INPUT -s $LAN_IP -i $WAN_IF -p udp -m udp --dport 32777:32780 -m comment --comment "NFS" -j ACCEPT
		COMMIT
	EOF
		iptables -t filter -A INPUT -s $LAN_IP -i $WAN_IF -p tcp -m tcp --dport 111 -m comment --comment "NFS" -j ACCEPT
		iptables -t filter -A INPUT -s $LAN_IP -i $WAN_IF -p udp -m udp --dport 111 -m comment --comment "NFS" -j ACCEPT
		iptables -t filter -A INPUT -s $LAN_IP -i $WAN_IF -p tcp -m tcp --dport 32777:32780 -m comment --comment "NFS" -j ACCEPT
		iptables -t filter -A INPUT -s $LAN_IP -i $WAN_IF -p udp -m udp --dport 32777:32780 -m comment --comment "NFS" -j ACCEPT
	}
	return $?
}

nfs_share() {
	[  -z "$1" ] && return 1
	config_get enabled "$1" enabled
	[ "$enabled" = '1' ] || return 1
	config_get path "$1" path
	[ -d "$path" ] || return 1
	config_get clients "$1" clients
	[ -z "$clients" ] && return 1
	config_get permission "$1" permission '0'
	case $permission in
		1)
			NFS_PERMISSION='no_root_squash'
			;;
		2)
			NFS_PERMISSION='no_root_squash,fsid=0'
			;;
		*)
			NFS_PERMISSION='all_squash'
			;;
	esac
	config_get read_only "$1" read_only '0'
	NFS_OPERATION="rw"
	[ $read_only = '1' ] && NFS_OPERATION="ro"
	NFS_INSECURE=""
	config_get insecure "$1" insecure '1'
	[ $insecure = '1' ] && NFS_INSECURE=",insecure"
	[ -z "$NFS_SHARE_ALL" ] || {
		FIND_NFS=$(echo -e "$NFS_SHARE_ALL"|grep -i "^$path ")
	}
	if [ -z "$FIND_NFS" ]; then
		NFS_SHARE_ALL=$([ -z "$NFS_SHARE_ALL" ] || echo "$NFS_SHARE_ALL\n")"$path $clients($NFS_OPERATION,no_subtree_check,$NFS_PERMISSION,async$NFS_INSECURE)"
	else
		NFS_SHARE_ALL=$(echo -e "$NFS_SHARE_ALL"|grep -iv "^$path ")
		NFS_SHARE_ALL=$([ -z "$NFS_SHARE_ALL" ] || echo "$NFS_SHARE_ALL\n")"$FIND_NFS $clients($NFS_OPERATION,no_subtree_check,$NFS_PERMISSION,async$NFS_INSECURE)"
	fi
}

nfs_share_start() {
	NFS_EXPORTS=$(cat /etc/exports)
	if check_nfsd; then
		if [ -z "$NFS_SHARE_ALL" ]; then
			echo -e "$NFS_SHARE_ALL">/etc/exports
			/usr/sbin/exportfs â€“au
			nfs_share_stop
		elif [ "$(echo -e $NFS_EXPORTS)" = "$(echo -e $NFS_SHARE_ALL)" ]; then
			return 1
		else
			echo -e "$NFS_SHARE_ALL">/etc/exports
			/usr/sbin/exportfs -ar
		fi
	else
		echo -e "$NFS_SHARE_ALL">/etc/exports
		/etc/init.d/portmap start &>/dev/null
		/etc/init.d/nfsd start &>/dev/null
		iptables_flush
		iptables_restore
	fi
}

nfs_share_stop() {
	iptables_flush
	/etc/init.d/nfsd stop &>/dev/null
	/etc/init.d/portmap stop &>/dev/null
}

get_mounted_nfs() {
	[ -z "$MOUNTED_ALL" ] && {
		MOUNTED_ALL=$(mount)
		MOUNTED_NFS_ALL=$(echo -e "$MOUNTED_ALL"|grep "type\s\+nfs\s")
	}
}

create_mount_dir() {
	if [ -d "$1" ]; then
		[ -z $(ls $"$1" 2>/dev/null) ] && return 0
		return 1
	else
		mkdir "$1"
		return 0
	fi
}

nfs_mount() {
	[  -z "$1" ] && return 1
	config_get enabled "$1" enabled
	[ "$enabled" = '1' ] || return 1
	config_get host "$1" host
	[ -z "$host" ] && return 1
	config_get path "$1" path
	[ -z "$path" ] && return 1
	config_get mount_on "$1" mount_on
	[ -z "$mount_on" ] && return 1
	config_get read_only "$1" read_only '0'
	MOUNT_OPERATION="rw"
	[ $read_only = '1' ] && MOUNT_OPERATION="ro"
	get_mounted_nfs
	NFS_MOUNTING=$([ -z "$NFS_MOUNTING" ] || echo "$NFS_MOUNTING\n")"$host:$path"
	NFS_MOUNT_MATCH=$(echo -e "$MOUNTED_NFS_ALL"|grep "^$host:$path")
	if [ -z "$NFS_MOUNT_MATCH" ]; then
		create_mount_dir "$mount_on" && mount -t nfs -o $MOUNT_OPERATION -o nolock "$host:$path" "$mount_on"
	else
		echo "$NFS_MOUNT_MATCH"|grep "$mount_on\s\+type\s\+nfs\s\+($MOUNT_OPERATION" 2>/dev/null && return 1
		umount -fr "$mount_on" && mount -t nfs -o $MOUNT_OPERATION -o nolock "$host:$path" "$mount_on"
	fi
}

nfs_mount_clean() {
	MOUNTED_ALL=''
	get_mounted_nfs
	echo -e "$MOUNTED_NFS_ALL"|while read NFS_SHARED
	do
		echo -e "$NFS_MOUNTING"|grep -x "${NFS_SHARED% on *}" 2>/dev/null || {
			NFS_SHARED_MOUNT="${NFS_SHARED##* on }"
			NFS_SHARED_MOUNT="${NFS_SHARED_MOUNT%% type*}"
			umount -fr "$NFS_SHARED_MOUNT" && rm -r "$NFS_SHARED_MOUNT"
		}
	done
}

config_cb() {
	local cfg="$CONFIG_SECTION"
	config_get configname "$cfg" TYPE
	case "$configname" in
		share)
			nfs_share "$cfg"
			;;
		mount)
			nfs_mount "$cfg"
			;;
	esac
}

start() {
	config_load $APP
	nfs_share_start
	nfs_mount_clean
}

stop() {
	nfs_mount_clean
	nfs_share_stop
}

restart() {
	start
}

firewall() {
	iptables_restore
}

